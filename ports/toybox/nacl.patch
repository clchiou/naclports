diff --git a/configure b/configure
index 6047baf..7cc58e9 100644
--- a/configure
+++ b/configure
@@ -8,7 +8,7 @@
 # Required for our expected ABI. we're 8-bit clean thus "char" must be unsigned.
 CFLAGS="$CFLAGS -funsigned-char"
 
-[ -z "$OPTIMIZE" ] && OPTIMIZE="-Os -ffunction-sections -fdata-sections -Wl,--gc-sections -fno-asynchronous-unwind-tables"
+[ -z "$OPTIMIZE" ] && OPTIMIZE="-ffunction-sections -fdata-sections -fno-asynchronous-unwind-tables"
 [ -z "$CC" ] && CC=cc
 [ -z "$STRIP" ] && STRIP=strip
 
diff --git a/lib/getmountlist.c b/lib/getmountlist.c
index c863de5..e7b9f10 100644
--- a/lib/getmountlist.c
+++ b/lib/getmountlist.c
@@ -5,13 +5,18 @@
 
 #include "toys.h"
 
+#ifndef __native_client__
 #include <mntent.h>
+#endif
 
 // Get list of mounted filesystems, including stat and statvfs info.
 // Returns a reversed list, which is good for finding overmounts and such.
 
 struct mtab_list *xgetmountlist(char *path)
 {
+#ifdef __native_client__
+  perror_exit("can't obtain mountlist on native client");
+#else
   struct mtab_list *mtlist, *mt;
   struct mntent *me;
   FILE *fp;
@@ -40,4 +45,5 @@ struct mtab_list *xgetmountlist(char *path)
   endmntent(fp);
 
   return mtlist;
+#endif
 }
diff --git a/lib/lib.h b/lib/lib.h
index a0a1c31..f5366a4 100644
--- a/lib/lib.h
+++ b/lib/lib.h
@@ -151,6 +151,7 @@ int yesno(char *prompt, int def);
 // net.c
 int xsocket(int domain, int type, int protocol);
 
+#ifndef __native_client__
 // getmountlist.c
 struct mtab_list {
   struct mtab_list *next;
@@ -160,6 +161,7 @@ struct mtab_list {
   char *device;
   char type[0];
 };
+#endif
 
 struct mtab_list *xgetmountlist(char *path);
 
diff --git a/lib/password.c b/lib/password.c
index 34abf6e..90c22f2 100644
--- a/lib/password.c
+++ b/lib/password.c
@@ -7,6 +7,10 @@
 #include "xregcomp.h"
 #include <time.h>
 
+#ifdef __native_client__
+#define LOGIN_NAME_MAX 256
+#endif
+
 int get_salt(char *salt, char *algo)
 {      
   int i, len = 0, offset = 0;
diff --git a/lib/pending.c b/lib/pending.c
index a804d5b..7ccae28 100644
--- a/lib/pending.c
+++ b/lib/pending.c
@@ -57,7 +57,7 @@ void daemonize(void)
   if (pid < 0) perror_exit("DAEMON: failed to fork");
   if (pid) exit(EXIT_SUCCESS);
 
-  setsid();
+  //setsid();
   dup2(fd, 0);
   dup2(fd, 1);
   dup2(fd, 2);
diff --git a/lib/portability.c b/lib/portability.c
index d901a4b..3063d56 100644
--- a/lib/portability.c
+++ b/lib/portability.c
@@ -6,7 +6,7 @@
 
 #include "toys.h"
 
-#if defined(__APPLE__) || defined(__ANDROID__)
+#if defined(__APPLE__) || defined(__ANDROID__) || defined(__native_client__)
 ssize_t getdelim(char **linep, size_t *np, int delim, FILE *stream)
 {
   int ch;
@@ -61,7 +61,7 @@ ssize_t getline(char **linep, size_t *np, FILE *stream)
 }
 #endif
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) || defined(__native_client__)
 extern char **environ;
 
 int clearenv(void)
@@ -70,3 +70,149 @@ int clearenv(void)
   return 0;
 }
 #endif
+
+#if defined(__native_client__)
+int openat(int dirfd, const char *pathname, int flags)
+  __attribute__((weak));
+int fstatat(int dirfd, const char *pathname, struct stat *buf, int flags)
+  __attribute__((weak));
+int fchmodat(int dirfd, const char *pathname, mode_t mode, int flags)
+  __attribute__((weak));
+int readlinkat(int dirfd, const char *pathname, char *buf, size_t bufsiz)
+  __attribute__((weak));
+int unlinkat(int dirfd, const char *pathname, int flags)
+  __attribute__((weak));
+int faccessat(int dirfd, const char *pathname, int mode, int flags)
+  __attribute__((weak));
+DIR *fdopendir(int dirfd)
+  __attribute__((weak));
+
+int mkdirat(int dirfd, const char *pathname, mode_t mode)
+  __attribute__((weak));
+int mknodat(int dirfd, const char *pathname, mode_t mode, dev_t dev)
+  __attribute__((weak));
+int fchownat(int dirfd, const char *pathname, uid_t owner,
+    gid_t group, int flags)
+  __attribute__((weak));
+int symlinkat(const char *oldpath, int dirfd, const char *newpath)
+  __attribute__((weak));
+int linkat(int dirfd, const char *oldpath,
+    int newdirfd, const char *newpath, int flags)
+  __attribute__((weak));
+
+#define _AT_WRAP_START(A) \
+    int fchdir_err = 0; \
+    char *save = xgetcwd(); \
+    if (!save) perror_exit("fd_wrapper_"A); \
+    if (dirfd != AT_FDCWD) fchdir_err = fchdir(dirfd);
+
+#define _AT_WRAP_END(A) \
+    if (dirfd != AT_FDCWD) chdir(save); \
+    free(save);
+
+int openat(int dirfd, const char *pathname, int flags) {
+  _AT_WRAP_START("openat")
+  int fd = open(pathname, flags);
+  _AT_WRAP_END("openat")
+  return fd;
+}
+
+int fstatat(int dirfd, const char *pathname, struct stat *buf, int flags) {
+  // We are going to ignore flags here.
+  //if (flags) perror_exit("fstatat_flags");
+  _AT_WRAP_START("fstatat")
+  int result = stat(pathname, buf);
+  _AT_WRAP_END("fstatat")
+  return result;
+}
+
+int fchmodat(int dirfd, const char *pathname, mode_t mode, int flags) {
+  // We are going to ignore flags here.
+  //if (flags) perror_exit("fchmodat_flags");
+  _AT_WRAP_START("fchmodat")
+  int result = chmod(pathname, mode);
+  _AT_WRAP_END("fchmodat")
+  return result;
+}
+
+int readlinkat(int dirfd, const char *pathname, char *buf, size_t bufsiz) {
+  _AT_WRAP_START("readlinkat")
+  int result = readlink(pathname, buf, bufsiz);
+  _AT_WRAP_END("readlinkat")
+  return result;
+}
+
+int unlinkat(int dirfd, const char *pathname, int flags) {
+  // We are going to ignore flags here.
+  //if (flags) perror_exit("unlinkat_flags");
+  _AT_WRAP_START("unlinkat")
+  int result;
+  if(flags & AT_REMOVEDIR) {
+    result = rmdir(pathname);
+  } else {
+    result = unlink(pathname);
+  }
+  _AT_WRAP_END("unlinkat")
+  return result;
+}
+
+int faccessat(int dirfd, const char *pathname, int mode, int flags) {
+  //if (flags) perror_exit("faccessat_flags");
+  _AT_WRAP_START("faccessat")
+  int result = access(pathname, mode);
+  _AT_WRAP_END("faccessat")
+  return result;
+}
+
+DIR *fdopendir(int dirfd) {
+  _AT_WRAP_START("fdopendir")
+  DIR *dir;
+  if (fchdir_err) {
+    perror("fdopendir: ");
+  } 
+  dir = opendir(".");
+  _AT_WRAP_END("fdopendir")
+  return dir;
+}
+
+int mkdirat(int dirfd, const char *pathname, mode_t mode) {
+  _AT_WRAP_START("mkdirat")
+  int result = mkdir(pathname, mode);
+  _AT_WRAP_END("mkdirat")
+  return result;
+}
+
+int mknodat(int dirfd, const char *pathname, mode_t mode, dev_t dev) {
+  error_exit("mknod not supported");
+}
+
+int fchownat(int dirfd, const char *pathname, uid_t owner,
+    gid_t group, int flags) {
+  _AT_WRAP_START("fchownat")
+  int result = chown(pathname, owner, group);
+  _AT_WRAP_END("fchownat")
+  return result;
+}
+
+int symlinkat(const char *oldpath, int dirfd, const char *newpath) {
+  _AT_WRAP_START("symlinkat")
+  int result = symlink(oldpath, newpath);
+  _AT_WRAP_END("symlinkat")
+  return result;
+}
+
+int linkat(int olddirfd, const char *oldpath,
+    int newdirfd, const char *newpath, int flags) {
+  int result;
+  if ((oldpath[0] == "/") && (newpath[0] == "/")) {
+    result = link(oldpath, newpath);
+  } else {
+    errno = EINVAL;
+    result = -1;
+  }
+  // We do not support double linking.
+  return result;
+}
+
+
+#endif
diff --git a/lib/portability.h b/lib/portability.h
index 745f8cd..bfef70d 100644
--- a/lib/portability.h
+++ b/lib/portability.h
@@ -15,7 +15,7 @@
 
 // Test for gcc (using compiler builtin #define)
 
-#ifdef __GNUC__
+#if defined(__GNUC__) && !defined(__native_client__)
 #define noreturn	__attribute__((noreturn))
 #else
 #define noreturn
@@ -26,7 +26,16 @@
 
 // This isn't in the spec, but it's how we determine what libc we're using.
 
+// Include sys/types.h so that we can later check for _NEWLIB_VERSION.
+#if defined(__native_client__)
+#include <sys/types.h>
+#endif
+
+#if defined(__native_client__) && defined(_NEWLIB_VERSION)
+#include <sys/features.h>
+#else
 #include <features.h>
+#endif
 
 // Various constants old build environments might not have even if kernel does
 
@@ -68,7 +77,7 @@ char *strptime(const char *buf, const char *format, struct tm *tm);
 ssize_t getdelim(char **lineptr, size_t *n, int delim, FILE *stream);
 
 // When building under obsolete glibc (Ubuntu 8.04-ish), hold its hand a bit.
-#elif __GLIBC__ == 2 && __GLIBC_MINOR__ < 10
+#elif __GLIBC__ == 2 && __GLIBC_MINOR__ < 10 && !defined(__native_client__)
 #define fstatat fstatat64
 int fstatat64(int dirfd, const char *pathname, void *buf, int flags);
 int readlinkat(int dirfd, const char *pathname, char *buf, size_t bufsiz);
@@ -102,7 +111,7 @@ int utimensat(int fd, const char *path, const struct timespec times[2], int flag
 
 // Work out how to do endianness
 
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__native_client__)
 #include <byteswap.h>
 #include <endian.h>
 
diff --git a/lib/xwrap.c b/lib/xwrap.c
index 98b4300..2cfb09e 100644
--- a/lib/xwrap.c
+++ b/lib/xwrap.c
@@ -224,7 +224,8 @@ off_t xlseek(int fd, off_t offset, int whence)
 
 char *xgetcwd(void)
 {
-  char *buf = getcwd(NULL, 0);
+  char *buf = xmalloc(sizeof(char) * (PATH_MAX+1));
+  buf = getcwd(buf, PATH_MAX+1);
   if (!buf) perror_exit("xgetcwd");
 
   return buf;
@@ -353,7 +354,11 @@ error:
 // Resolve all symlinks, returning malloc() memory.
 char *xrealpath(char *path)
 {
+#ifdef __native_client__
+  char *new = strdup(path);
+#else
   char *new = realpath(path, NULL);
+#endif
   if (!new) perror_exit("realpath '%s'", path);
   return new;
 }
diff --git a/main.c b/main.c
index 53f670d..3ae7e64 100644
--- a/main.c
+++ b/main.c
@@ -157,9 +157,59 @@ list:
   xputc('\n');
 }
 
-int main(int argc, char *argv[])
+#ifdef __native_client__
+#define MAIN_NAME toybox_cmdline
+#include "nacl_io/nacl_io.h"
+#include "ppapi_simple/ps_main.h"
+#include "ppapi/c/ppb_messaging.h"
+#include "ppapi/c/pp_instance.h"
+#include "ppapi_simple/ps_interface.h"
+
+int setup_unix_environment(void) {
+  int ret;
+  ret = umount("/");
+  if (ret) {
+    printf("umounting root fs failed: %s\n", strerror(errno));
+    return 1;
+  }
+  ret = mount("", "/", "memfs", 0, NULL);
+  if (ret) {
+    printf("mounting mem fs failed: %s\n", strerror(errno));
+    return 1;
+  }
+
+  mkdir("/home", 0777);
+  mkdir("/tmp", 0777);
+  mkdir("/bin", 0777);
+  mkdir("/etc", 0777);
+  mkdir("/mnt", 0777);
+
+  // Ignore failures from mounting html5fs.  For example, it will always
+  // fail in incognito mode.
+  mount("/", "/home", "html5fs", 0, "type=TEMPORARY");
+
+  // Setup environment variables
+  setenv("HOME", "/home", 1);
+  setenv("PATH", "/bin", 1);
+  setenv("USER", "user", 1);
+  setenv("LOGNAME", "user", 1);
+  chdir("/home");
+
+  setlocale(LC_CTYPE, "");
+
+  return 0;
+}
+#else
+#define MAIN_NAME main
+#endif
+
+int MAIN_NAME(int argc, char *argv[])
 {
+#ifdef __native_client__
+  setup_unix_environment();
+#else
   if (CFG_TOYBOX_I18N) setlocale(LC_ALL, "");
+#endif
 
   if (CFG_TOYBOX) {
     // Trim path off of command name
@@ -178,3 +228,7 @@ int main(int argc, char *argv[])
 
   return toys.exitval;
 }
+
+#ifdef __native_client__
+PPAPI_SIMPLE_REGISTER_MAIN(MAIN_NAME)
+#endif
diff --git a/scripts/install.c b/scripts/install.c
index cda8fc2..1abbe16 100644
--- a/scripts/install.c
+++ b/scripts/install.c
@@ -3,6 +3,9 @@
  * Copyright 2006 Rob Landley <rob@landley.net>
  */
 
+#define _SKIP_LIBC_HEADERS
+#include <setjmp.h>
+#include <stdio.h>
 #include "toys.h"
 
 #undef NEWTOY
diff --git a/scripts/make.sh b/scripts/make.sh
index a685010..345e45d 100755
--- a/scripts/make.sh
+++ b/scripts/make.sh
@@ -162,9 +162,11 @@ echo "Library probe..."
 # that doesn't exist, so we have to detect and skip nonexistent libraries
 # for it.
 
-OPTLIBS="$(for i in util crypt m; do echo "int main(int argc, char *argv[]) {return 0;}" | ${CROSS_COMPILE}${CC} -xc - -o /dev/null -Wl,--as-needed -l$i > /dev/null 2>/dev/null && echo -l$i; done)"
+OPTLIBS="$(for i in glibc-compat nacl_io util crypt m; do echo "int main(int argc, char *argv[]) {return 0;}" | ${CROSS_COMPILE}${CC} -xc - -o /dev/null -Wl,--as-needed -l$i > /dev/null 2>/dev/null && echo -l$i; done)"
 
 echo "Compile toybox..."
+OPTLIBS="${LDFLAGS}"
+echo $OPTLIBS
 
 do_loudly()
 {
diff --git a/toys.h b/toys.h
index 8450b80..08e4b75 100644
--- a/toys.h
+++ b/toys.h
@@ -5,6 +5,8 @@
 
 #include "generated/config.h"
 
+#ifndef _SKIP_LIBC_HEADERS
+
 #include "lib/portability.h"
 
 #include <ctype.h>
@@ -16,12 +18,16 @@
 #include <limits.h>
 #include <libgen.h>
 #include <math.h>
+#ifndef __native_client__
 #include <pty.h>
+#endif
 #include <pwd.h>
 #include <sched.h>
 #include <setjmp.h>
 #include <sched.h>
+#ifndef __native_client__
 #include <shadow.h>
+#endif
 #include <stdarg.h>
 #include <stddef.h>
 #include <stdint.h>
@@ -34,10 +40,13 @@
 #include <sys/mount.h>
 #include <sys/resource.h>
 #include <sys/stat.h>
+#ifndef __native_client__
 #include <sys/statfs.h>
 #include <sys/statvfs.h>
 #include <sys/sysinfo.h>
 #include <sys/swap.h>
+#endif
+#include <sys/termios.h>
 #include <sys/time.h>
 #include <sys/times.h>
 #include <sys/types.h>
@@ -47,7 +56,9 @@
 #include <time.h>
 #include <unistd.h>
 #include <utime.h>
+#ifndef __native_client__
 #include <utmpx.h>
+#endif
 
 // Internationalization support
 
@@ -59,7 +70,9 @@
 
 #include <arpa/inet.h>
 #include <netdb.h>
+#ifndef __native_client__
 #include <net/if.h>
+#endif
 #include <netinet/in.h>
 #include <netinet/tcp.h>
 #include <poll.h>
@@ -69,6 +82,8 @@
 #include "lib/lib.h"
 #include "toys/e2fs.h"
 
+#endif // _SKIP_LIBC_HEADERS
+
 // Get list of function prototypes for all enabled command_main() functions.
 
 #define NEWTOY(name, opts, flags) void name##_main(void);
@@ -76,7 +91,9 @@
 #include "generated/newtoys.h"
 #include "generated/oldtoys.h"
 #include "generated/flags.h"
+#ifndef _SKIP_LIBC_HEADERS
 #include "generated/globals.h"
+#endif
 
 // These live in main.c
 
diff --git a/toys/other/stat.c b/toys/other/stat.c
index d603316..c950b65 100644
--- a/toys/other/stat.c
+++ b/toys/other/stat.c
@@ -40,7 +40,9 @@ GLOBALS(
 
   union {
     struct stat st;
+#ifndef __native_client__
     struct statfs sf;
+#endif
   } stat;
   struct passwd *user_name;
   struct group *group_name;
diff --git a/toys/other/timeout.c b/toys/other/timeout.c
index 4b8a87d..9fdd3ea 100644
--- a/toys/other/timeout.c
+++ b/toys/other/timeout.c
@@ -33,7 +33,9 @@ GLOBALS(
   int nextsig;
   pid_t pid;
   struct timeval ktv;
+#ifndef __native_client__
   struct itimerval itv;
+#endif
 )
 
 static void handler(int i)
diff --git a/toys/pending/sh.c b/toys/pending/sh.c
index 2f09f63..ef7da08 100644
--- a/toys/pending/sh.c
+++ b/toys/pending/sh.c
@@ -291,7 +291,11 @@ static void run_pipeline(struct pipeline *line)
 
   tl = toy_find(cmd->argv[0]);
   // Is this command a builtin that should run in this process?
+#ifdef __native_client__
+  if (tl) {
+#else
   if (tl && (tl->flags & TOYFLAG_NOFORK)) {
+#endif
     struct toy_context temp;
     jmp_buf rebound;
 
@@ -311,10 +315,15 @@ static void run_pipeline(struct pipeline *line)
   } else {
     int status;
 
+#ifdef __native_client__
+    cmd->pid = nacl_spawn_simple(cmd->argv);
+    if (cmd->pid <= 0) xprintf("error spawning %s\n", cmd->argv[0]);
+    else nacl_waitpid(cmd->pid, &status, 0);
+#else
     cmd->pid = vfork();
     if (!cmd->pid) xexec(cmd->argv);
     else waitpid(cmd->pid, &status, 0);
-
+#endif
     if (CFG_SH_FLOWCTL || CFG_SH_PIPES) {
       if (WIFEXITED(status)) cmd->pid = WEXITSTATUS(status);
       if (WIFSIGNALED(status)) cmd->pid = WTERMSIG(status);
@@ -382,7 +391,12 @@ void sh_main(void)
     for (;;) {
       char *command = 0;
       if (!f) xputc('$');
-      if (1 > getline(&command, &cmdlen, f ? f : stdin)) break;
+      if (1 > getline(&command, &cmdlen, f ? f : stdin)) 
+#ifdef __native_client__ // Here we want to continue cycling until explicit exit.
+        continue;
+#else
+        break;
+#endif
       handle(command);
       free(command);
     }
diff --git a/toys/posix/cp.c b/toys/posix/cp.c
index 088f224..2581f08 100644
--- a/toys/posix/cp.c
+++ b/toys/posix/cp.c
@@ -232,18 +232,24 @@ int cp_node(struct dirtree *try)
 
       // Inability to set these isn't fatal, some require root access.
 
+#ifndef __native_client__
       times[0] = try->st.st_atim;
       times[1] = try->st.st_mtim;
+#endif
 
       // If we can't get a filehandle to the actual object, use racy functions
       if (fdout == AT_FDCWD) {
         fchownat(cfd, catch, try->st.st_uid, try->st.st_gid,
                  AT_SYMLINK_NOFOLLOW);
+#ifndef __native_client__
         utimensat(cfd, catch, times, AT_SYMLINK_NOFOLLOW);
+#endif
         // permission bits already correct for mknod, don't apply to symlink
       } else {
         fchown(fdout, try->st.st_uid, try->st.st_gid);
+#ifndef __native_client__
         futimens(fdout, times);
+#endif
         fchmod(fdout, try->st.st_mode);
       }
     }
diff --git a/toys/posix/ls.c b/toys/posix/ls.c
index b504f9e..b946080 100644
--- a/toys/posix/ls.c
+++ b/toys/posix/ls.c
@@ -97,10 +97,15 @@ static char *getusername(uid_t uid)
 
 static char *getgroupname(gid_t gid)
 {
+#ifdef __native_client__
+  static char* gr_name = "nacl";
+  return gr_name;
+#else
   struct group *gr = getgrgid(gid);
 
   sprintf(TT.gid_buf, "%u", (unsigned)gid);
   return gr ? gr->gr_name : TT.gid_buf;
+#endif
 }
 
 // Figure out size of printable entry fields for display indent/wrap
